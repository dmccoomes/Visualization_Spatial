# similar and saving space:
columnToAggregate=contriWA$amount
link='https://github.com/EvansDataScience/data/raw/master/contriWA.RData'
#getting the data TABLE from the file in the cloud:
load(file=url(link))
str(contriWA,width = 60, strict.width = 'cut')
sort(unique(contriWA$election_year))
# link to zipped folder
zippedSHP= "https://github.com/EvansDataScience/data/raw/master/WAzips.zip"
library(utils)
temp=tempfile()
download.file(zippedSHP, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
library(rgdal)
wazipMap <- readOGR("SAEP_ZIP_Code_Tabulation_Areas.shp",stringsAsFactors=F)
plot(wazipMap)
library(raster)
mapCRS=crs(wazipMap) # projection of our map
contriWA_geo <- SpatialPointsDataFrame(contriWA[,c(10:9)], # Lon/LAT
contriWA,    #the original data frame
proj4string = mapCRS)   # assign a CRS of map
names(contriWA_geo)
class(contriWA_geo)
library(tmaptools)
get_proj4(mapCRS)
plot(wazipMap,border='blue',col='yellow',lwd=0.1)
# NEW LAYER ON TOP
plot(contriWA_geo,
pch=20, #type of character (see link above)
col = "red",
cex = .6, # shrinking
add=T) # VERY important
#install.packages("rmapshaper")   #DMC adding
library(rmapshaper)
# This will make just a border of the state
baseMap <- ms_dissolve(wazipMap)
# similar and saving space:
columnToAggregate=contriWA$amount
# new ROW:
newROW_UNIT=list(zipCode=contriWA$contributor_zip)
WA_zip_contri=with(contriWA,
aggregate(columnToAggregate,
newROW_UNIT,
mean)) #mean per zip code
#see result:
head(WA_zip_contri)
names(wazipMap)
str(wazipMap$ZCTA5CE10)
wazipMap$ZCTA5CE10=as.numeric(wazipMap$ZCTA5CE10)
layerContrib=merge(wazipMap,WA_zip_contri, by.x='ZCTA5CE10', by.y='zipCode',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=layerContrib$AVE_Amount
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
#install.packages("rmapshaper")   #DMC adding
library(rmapshaper)
# This will make just a border of the state
baseMap <- ms_dissolve(wazipMap)
plot(contriWA_geo, pch=20, col = "pink", cex = .3)
# add on top
plot(baseMap,border='black',col=NA,lwd=1,add=T)
layerContrib=merge(wazipMap,WA_zip_contri, by.x='ZCTA5CE10', by.y='zipCode',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=layerContrib$AVE_Amount
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(ZCTA5CE10, numberOfClasses,
style = "quantile",
dataPrecision=2)
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals('ZCTA5CE10', numberOfClasses,
style = "quantile",
dataPrecision=2)
varToPLot=layerContrib$AVE_Amount
varToPLot=layerContrib$AVE_Amount
varToPlot=as.numeric(VarToPlot)
varToPLot=layerContrib$AVE_Amount
wazipMap$varToPlot=as.numeric(wazipMap$varToPlot)
varToPLot=layerContrib$AVE_Amount
varToPlot=as.numeric(wazipMap$varToPlot)
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
varToPLot=layerContrib$AVE_Amount
varToPlot=as.numeric(wazipMap$varToPlot)
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, #numberOfClasses,
style = "quantile",
dataPrecision=2)
names(varToPlot)
str(varToPlot)
numberOfClasses = '5'
str(varToPlot)
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
numberOfClasses = '5'
#str(varToPlot)
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
numberOfClasses = 5
#str(varToPlot)
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
varToPLot=layerContrib$AVE_Amount
#DMC adding
#varToPlot=as.numeric(wazipMap$varToPlot)
numberOfClasses = 5
#str(varToPlot)
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
knitr::opts_chunk$set(echo = TRUE)
str(mozzipMap)
plot(mozzipMap)
knitr::opts_chunk$set(echo = TRUE)
link="https://github.com/quinhasf/pubpol-599/raw/master/ape_analysis.dta"
chw_fp <- read_dta(url(link))
plot(mozzipMap)
link="https://github.com/quinhasf/pubpol-599/raw/master/ape_analysis.dta"
chw_fp <- read_dta(url(link))
#install.packages("haven")
#install.packages("ggplot2")
#install.packages("foreign")
library ("haven")
#library("ggplot2")
library("foreign")
link="https://github.com/quinhasf/pubpol-599/raw/master/ape_analysis.dta"
chw_fp <- read_dta(url(link))
#DMC - using the zip file in the repository instead of the shape file
#maplink="https://github.com/ihsun-uw/Group3_Final_Project/raw/master/MOZ-level_1.shp"
#moz_map = st_read("/Users/david/Documents/GitHub/Group3_Final_Project/Mozambique shape maps")
zip_mozmap_SHP = "https://github.com/ihsun-uw/Group3_Final_Project/raw/master/Mozambique%20shape%20maps.zip"
library(utils)
temp=tempfile()
download.file(zip_mozmap_SHP, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
# notice the parameters use in the chunk!!
library(rgdal)
mozzipMap <- readOGR("MOZ-level_1.shp",stringsAsFactors=F)
str(mozzipMap)
str(chw_fp)
plot(mozzipMap)
str(chw_fp$province)
#str(mozzipMap)
str(chw_fp$province)
names(chw_fp$province)
dim(chw_fp)
head(chw_fp$province, 10)
plot(mozzipMap)
str(chw_fp$province)
#str(mozzipMap)
head(chw_fp$province, 15)
head(chw_fp$province, 15)
head(chw_fp$province, 50)
head(chw_fp$province, 5)
head(chw_fp$province, 10)
head(chw_fp$province)
head(chw_fp$province, 10)
names(mozzipmap)
# notice the parameters use in the chunk!!
library(rgdal)
mozzipMap <- readOGR("MOZ-level_1.shp",stringsAsFactors=F)
names(mozzipmap)
names(mozzipmap)
plot(mozzipMap)
str(chw_fp$province)
#str(mozzipMap)
head(chw_fp$province, 10)
names(mozzipmap)
names(mozzipMap)
plot(mozzipMap)
str(chw_fp$province)
#str(mozzipMap)
head(chw_fp$province, 10)
names(mozzipMap)
head(mozzipMap$CAPTION)
head(mozzipMap$CAPTION)
head(mozzipMap$CAPTION, 50)
str(mozzipMap$CAPTION)
mozzipMap$CAPTION=as.numeric(mozzipMap$CAPTION)
layerContrib=merge(mozzipMap,chw_fp, by.x='CAPTION', by.y='province',all.x=F)
head(chw_fp$province, 10)
chw_fp$provnice_num <- chw_fp$province
chw_fp$provnice_num[chw_fp$provnice_num=="CABO DELGADO"] <- 1
